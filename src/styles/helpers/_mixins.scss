@use 'sass:string';

$max: 1920;
$desktop: 1600;
$laptop: 1300;
$tablet: 900;
$mobile: 540;

$laptop2: 1400; //DELETE
// $tablet: 768;

@mixin mq_l {
  @media (max-width: #{$laptop}px) {
    @content;
  }
}

@mixin mq_ls {
  @media (max-width: #{$laptop2}px) {
    @content;
  }
}

@mixin mq_t {
  @media (max-width: #{$tablet}px) {
    @content;
  }
}

@mixin mq_m {
  @media (max-width: #{$mobile}px) {
    @content;
  }
}

@mixin font-sub {
  font-family: 'Montserrat';
}

@mixin ellipsis($lines: 1) {
  @if ($lines==1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
  }
}

@mixin screenOut {
  overflow: hidden;
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  font-size: 1px;
  line-height: 0;
  color: transparent;
  clip: rect(0, 0, 0, 0);
}

@function vh($px) {
  @return #{calc($px / 1080) * 100}vh;
}

@function vw($px, $break: 1920) {
  @return #{calc($px / $break) * 100}vw;
}

@function rem($px) {
  @return calc($px / 10) * 1rem;
}

@function break($px, $unit: vw, $break: $laptop) {
  @return #{calc($px * 100 / $break)}#{$unit};
}

@function minPadding($min, $contentsSize, $morePadding: 0) {
  @return max(#{$min}, #{calc(50vh - $contentsSize)});
}

$commonPadding: clamp(var(--m-padding-h), break(60), var(--d-padding-h));

$base-size: 16px;
@function rem2($sizes...) {
  $values: null;

  @each $size in $sizes {
    @if type-of($size) != 'number' {
      @debug #{'Invalid value passed to getRem: "' $size '", which is of type'
        type-of($size)};
    } @else if unit($size) == '' {
      $values: append($values, #{$size * 1px / $base-size}rem);
    } @else if unit($size) == 'px' {
      $values: append($values, #{$size / $base-size}rem);
    }
  }

  @return $values;
}
